plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
    id "org.jlleitschuh.gradle.ktlint" version "11.5.1"
    id 'com.google.android.libraries.mapsplatform.secrets-gradle-plugin'
}

android {
    namespace AppConfigs.application_id
    compileSdk AppConfigs.compile_sdk_version

    defaultConfig {
        applicationId AppConfigs.application_id
        minSdk AppConfigs.min_sdk_version

        targetSdk AppConfigs.target_sdk_version
        versionCode AppConfigs.version_code
        versionName AppConfigs.version_name

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        def localProperties = loadLocalProperties()
        buildConfigField "String", "TRIP_ADVISOR_KEY", localProperties['TRIP_ADVISOR_KEY']
        buildConfigField "String", "TRIP_ADVISOR_URL", localProperties['TRIP_ADVISOR_URL']
        buildConfigField "String", "TRAVEL_ADVISOR_RAPID_KEY", localProperties['TRAVEL_ADVISOR_RAPID_KEY']
        buildConfigField "String", "TRAVEL_ADVISOR_RAPID_URL", localProperties['TRAVEL_ADVISOR_RAPID_URL']
        buildConfigField "String", "FOURSQUARE_KEY", localProperties['FOURSQUARE_KEY']
        buildConfigField "String", "FOURSQUARE_URL", localProperties['FOURSQUARE_URL']

        def geoApiKey = localProperties['GEO_API_KEY']
        buildConfigField "String", "GEO_API_KEY", geoApiKey
    }

    def localProperties = loadLocalProperties()
    def geoApiKey = localProperties['GEO_API_KEY']
    buildTypes {
        release {
            shrinkResources false
            manifestPlaceholders GEO_API_KEY: geoApiKey
            minifyEnabled false
            debuggable false
            resValue 'string', 'app_name', AppConfigs.app_name
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.debug
        }
        debug {
            manifestPlaceholders GEO_API_KEY: geoApiKey
            resValue 'string', 'app_name', AppConfigs.app_name_debug
            applicationIdSuffix '.dev'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }

    buildFeatures {
        viewBinding = true
        buildConfig = true
    }
}

dependencies {

    implementation Deps.core_ktx
    implementation Deps.appcompat
    implementation Deps.material
    implementation Deps.constraint_layout
    testImplementation Deps.junit
    androidTestImplementation Deps.androidx_junit
    androidTestImplementation Deps.androidx_espresso_core
    implementation Deps.flexBoxlayout
    implementation Deps.viewPager2
    implementation Deps.gson
    implementation Deps.glide
    implementation Deps.playServiceLocation
    implementation Deps.playServiceMap
}

def loadLocalProperties() {
    def localProperties = new Properties()
    def localPropertiesFile = rootProject.file("local.properties")
    if (localPropertiesFile.exists()) {
        localProperties.load(new FileInputStream(localPropertiesFile))
        return localProperties
    }
}
